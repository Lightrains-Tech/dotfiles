{
  "Log to the console": {
    "prefix": "log",
    "body": ["console.log($1);", "$0"
    ],
    "description": "Log to the console"
  },
  "Throw Exception": {
    "prefix": "throw",
    "body": ["throw new Error(\"$1\");", "$0"],
    "description": "Throw Exception"
  },
  "reactFunctionComponent": {
    "prefix": "rfc",
    "body": "import React from 'react';\n\nconst ${1:${TM_FILENAME_BASE}} = () => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t);\n};\n\nexport default ${1:${TM_FILENAME_BASE}};",
    "description": "Creates a React functional component"
  },
  "reactMemo": {
    "prefix": "rscm",
    "body": "import React, { memo } from 'react';\n\nconst ${1:${TM_FILENAME_BASE}} = memo(() => {\n\treturn (\n\t\t<div>\n\t\t\t$0\n\t\t</div>\n\t);\n});\n\nexport default ${1:${TM_FILENAME_BASE}};",
    "description": "Creates a memoized stateless React component without PropTypes and ES6 module system"
  },
  "reactStatelessFunction": {
    "prefix": "rsf",
    "body": "import React from 'react';\n\nfunction ${1:${TM_FILENAME_BASE}}(props) {\n\treturn (\n\t\t<div>\n\t\t\t\n\t\t</div>\n\t);\n}\n\nexport default ${1:${TM_FILENAME_BASE}};",
    "description": "Creates a stateless React component as a named function without PropTypes"
  },
  "reactStatelessImplicitReturn": {
    "prefix": "rsi",
    "body": "import React from 'react';\n\nconst ${1:${TM_FILENAME_BASE}} = (props) => (\n\t\t\t$0\n\t);\n\nexport default ${1:${TM_FILENAME_BASE}};",
    "description": "Creates a stateless React component without PropTypes and ES6 module system but with Implicit Return and props"
  },
  "emptyState": {
    "prefix": "est",
    "body": "this.state = {\n\t$1\n};",
    "description": "Creates empty state object. To be used in a constructor."
  },
  "bindThis": {
    "prefix": "bnd",
    "body": "this.$1 = this.$1.bind(this);$0",
    "description": "Binds the this of a method. To be used inside a constructor"
  },
  "getSnapshotBeforeUpdate": {
    "prefix": "gsbu",
    "body": "getSnapshotBeforeUpdate(prevProps, prevState) {\n\t$0\n}\n",
    "description": "Invoked right before the most recently rendered output is committed to e.g. the DOM. It enables your component to capture current values"
  },
  "getDerivedStateFromProps": {
    "prefix": "gdsfp",
    "body": "static getDerivedStateFromProps(nextProps, prevState) {\n\t$0\n}\n",
    "description": "Invoked after a component is instantiated as well as when it receives new props."
  },
  "componentDidCatch": {
    "prefix": "cdc",
    "body": "componentDidCatch(error, info) {\n\t$0\n}\n",
    "description": "Error boundaries catch errors during rendering, in lifecycle methods, and in constructors of the whole tree below them."
  },
  "dispatchRedux": {
    "prefix": "disp",
    "body": "function mapDispatchToProps(dispatch) {\n\treturn {\n\t}\n\n}",
    "description": "Adds the redux mapDispatchToProps function"
  },
  "useState": {
    "prefix": "uss",
    "body": "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:initialState});$0",
    "description": "Creates a useState hook"
  },
  "useEffect": {
    "prefix": "uef",
    "body": "useEffect(() => {\n\t$0\n});",
    "description": "Creates a useEffect hook that runs on every render"
  },
  "useEffectWithCleanup": {
    "prefix": "uefc",
    "body": "useEffect(() => {\n\t$1\n\n\treturn () => {\n\t\t$0\n\t};\n});",
    "description": "Creates a useEffect hook with cleanup function"
  },
  "useEffectOnMount": {
    "prefix": "uefm",
    "body": "useEffect(() => {\n\t$0\n}, []);",
    "description": "Creates a useEffect hook that only runs once on mount"
  }
}
